(define x 1 )
(define (f x) (+ x 1 ))
(define g (lambda (x) (+ x 1 )))
(writeln x)
(writeln (f 5))
(writeln (g 5))
; fg hívás szintaxisa: (fg neve akt param lista)
(define (square x) (* x x ))
(define (add x y ) (+ x y))
(define (multiplication x y) (* x y))
(define (max2 a b)
    (if (> a b)
    a
    b))
(writeln (max2 5 6))
(writeln (max2 8 6))
(define (max3 a b c)
    (define z (max2 a b))
    (max2 z c))
;if szintaxisa:
; (if (feltétel) érték_ha_igaz érték_ha_hamis)

(define (max4 a b c d)
    (max3 a b c)
    (max2 a b))
(writeln (max 11 32 43 4))

;conditionals = feltételes utasítások
;if 
;cond
;van olyan, hogy utasítás
; vagy minden kifejezés
;Java: x = 1; ez egy utasítás
;          1 ez egy kifejezés
;kifejezésnek 2 attribútuma van - típusa és értéke 
;minden aminek van típusa értéke és típusa az 
;kifejezés - expression
;utasítás - statement 
;racketban minden kifejezések kivéve define, az utolsó kif értékte a visszatérési érték
;define-on belül is lehet define ha lokális változót akarunk, itt az x2 egy lokális változó
(define (inc x)
    (define x2 (+ x 1))
    x2)
(writeln (inc 8))


;max 5 lokális változóval

(define (max5 a b c d e)
    (define r (max4 a b c d))
    (max2 r e))
(writeln (max5 1 2 3 4 5))

;max6
(define (max6 a b c d e f)
    (define r (max5 a b c d e))
    (max2 r f))
(writeln (max6 1 2 3 4 5 6))

;conditional

(define (tipus x)
    (cond
        [(integer? x) "Integer"]
        [(number? x) "szám"]
        [(string? x) "sztring"]
        [(list? x) "lista"]
        [else "valami mas"]
        ))

(writeln (tipus true))
;cond szintaxisa 
;Ö
(define (id x)
    (set!  count (+ count 1))
    x)
(define (square x) (* (id x) (id x)))

;set! egy változó értékét megváltoztatni









